package com.earl.cas.entity;
// Generated 2016-11-21 9:28:51 by Hibernate Tools 5.2.0.Beta1

import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

/**
 * Apply generated by hbm2java
 */
@Entity
@Table(name = "apply", catalog = "clubsystem")
public class Apply implements Serializable
{
	//表明类的不同版本间的兼容性
	private static final long serialVersionUID = 1L;
	
	//申请表编号
	private int id;
	
	//社团
	private Club club;
	
	//用户
	private User user;
	
	//真实姓名
	private String name;
	
	//邮箱
	private String email;
	
	//性别
	private Boolean sex;
	
	//年龄
	private Integer age;
	
	//民族
	private String nation;
	
	//爱好
	private String hobby;
	
	//电话
	private String phone;
	
	//专业班级
	private String majorClass;
	
	//个人简介
	private String introduce;
	
	//申请时间
	private Date createtime;
	
	//申请理由
	private String reason;
	
	//状态
	private Integer statue;

	private Set<Userclub> userclubs = new HashSet<Userclub>(0);

	public Apply() {
	}

	public Apply(int id, Date createtime) {
		this.id = id;
		this.createtime = createtime;
	}

	public Apply(int id, Club club, User user, String name, String email,
			Boolean sex, Integer age, String nation, String hobby, String phone,
			String majorClass, String introduce, Date createtime, String reason,
			Integer statue, Set<Userclub> userclubs) {
		this.id = id;
		this.club = club;
		this.user = user;
		this.name = name;
		this.email = email;
		this.sex = sex;
		this.age = age;
		this.nation = nation;
		this.hobby = hobby;
		this.phone = phone;
		this.majorClass = majorClass;
		this.introduce = introduce;
		this.createtime = createtime;
		this.reason = reason;
		this.statue = statue;
		this.userclubs = userclubs;
	}

	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "club_id")
	public Club getClub() {
		return this.club;
	}

	public void setClub(Club club) {
		this.club = club;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_id")
	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@Column(name = "name")
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "email")
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "sex")
	public Boolean getSex() {
		return this.sex;
	}

	public void setSex(Boolean sex) {
		this.sex = sex;
	}

	@Column(name = "age")
	public Integer getAge() {
		return this.age;
	}

	public void setAge(Integer age) {
		this.age = age;
	}

	@Column(name = "nation")
	public String getNation() {
		return this.nation;
	}

	public void setNation(String nation) {
		this.nation = nation;
	}

	@Column(name = "hobby")
	public String getHobby() {
		return this.hobby;
	}

	public void setHobby(String hobby) {
		this.hobby = hobby;
	}

	@Column(name = "phone")
	public String getPhone() {
		return this.phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	@Column(name = "major_class")
	public String getMajorClass() {
		return this.majorClass;
	}

	public void setMajorClass(String majorClass) {
		this.majorClass = majorClass;
	}

	@Column(name = "introduce", length = 65535)
	public String getIntroduce() {
		return this.introduce;
	}

	public void setIntroduce(String introduce) {
		this.introduce = introduce;
	}

	@Transient   //设置该属性后标致该属性不持久化数据库，由数据库自己管理
	public Date getCreatetime() {
		return this.createtime;
	}

	public void setCreatetime(Date createtime) {
		this.createtime = createtime;
	}

	@Column(name = "reason", length = 65535)
	public String getReason() {
		return this.reason;
	}

	public void setReason(String reason) {
		this.reason = reason;
	}

	@Column(name = "statue")
	public Integer getStatue() {
		return this.statue;
	}

	public void setStatue(Integer statue) {
		this.statue = statue;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "apply")
	public Set<Userclub> getUserclubs() {
		return this.userclubs;
	}

	public void setUserclubs(Set<Userclub> userclubs) {
		this.userclubs = userclubs;
	}

	@Override
	public String toString() {
		return "Apply [id=" + id + ", club=" + club + ", user=" + user
				+ ", name=" + name + ", email=" + email + ", sex=" + sex
				+ ", age=" + age + ", nation=" + nation + ", hobby=" + hobby
				+ ", phone=" + phone + ", majorClass=" + majorClass
				+ ", introduce=" + introduce + ", createtime=" + createtime
				+ ", reason=" + reason + ", statue=" + statue + ", userclubs="
				+ userclubs + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((age == null) ? 0 : age.hashCode());
		result = prime * result
				+ ((createtime == null) ? 0 : createtime.hashCode());
		result = prime * result + ((email == null) ? 0 : email.hashCode());
		result = prime * result + ((hobby == null) ? 0 : hobby.hashCode());
		result = prime * result + id;
		result = prime * result
				+ ((introduce == null) ? 0 : introduce.hashCode());
		result = prime * result
				+ ((majorClass == null) ? 0 : majorClass.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + ((nation == null) ? 0 : nation.hashCode());
		result = prime * result + ((phone == null) ? 0 : phone.hashCode());
		result = prime * result + ((reason == null) ? 0 : reason.hashCode());
		result = prime * result + ((sex == null) ? 0 : sex.hashCode());
		result = prime * result + ((statue == null) ? 0 : statue.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Apply other = (Apply) obj;
		if (age == null) {
			if (other.age != null)
				return false;
		} else if (!age.equals(other.age))
			return false;
		if (createtime == null) {
			if (other.createtime != null)
				return false;
		} else if (!createtime.equals(other.createtime))
			return false;
		if (email == null) {
			if (other.email != null)
				return false;
		} else if (!email.equals(other.email))
			return false;
		if (hobby == null) {
			if (other.hobby != null)
				return false;
		} else if (!hobby.equals(other.hobby))
			return false;
		if (id != other.id)
			return false;
		if (introduce == null) {
			if (other.introduce != null)
				return false;
		} else if (!introduce.equals(other.introduce))
			return false;
		if (majorClass == null) {
			if (other.majorClass != null)
				return false;
		} else if (!majorClass.equals(other.majorClass))
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (nation == null) {
			if (other.nation != null)
				return false;
		} else if (!nation.equals(other.nation))
			return false;
		if (phone == null) {
			if (other.phone != null)
				return false;
		} else if (!phone.equals(other.phone))
			return false;
		if (reason == null) {
			if (other.reason != null)
				return false;
		} else if (!reason.equals(other.reason))
			return false;
		if (sex == null) {
			if (other.sex != null)
				return false;
		} else if (!sex.equals(other.sex))
			return false;
		if (statue == null) {
			if (other.statue != null)
				return false;
		} else if (!statue.equals(other.statue))
			return false;
		return true;
	}
	
}
